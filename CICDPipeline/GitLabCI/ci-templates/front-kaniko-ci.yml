image: 
  name: $GCR_CACHE_REGISTRY_URL/kaniko-project/executor:v1.14.0-debug
  entrypoint: [""]
# cache reg: images that need to be pulled from docker.io
# reg: custom images made by us

stages:
  - package-installation
  - build
  - test
  - release
  - deploy-k8s
  
variables:
  name: $CI_PROJECT_NAME-$CI_PIPELINE_ID
  image: $REGISTRY_URL/$CI_PROJECT_PATH

workflow:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(v|V)?[0-9]{1,2}\.[0-9]{1,3}\.[0-9]{1,3}[^\s\\]{0,48}$/'
      variables:
        VERSION: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE == "push"'
      variables:
        VERSION: $CI_COMMIT_SHORT_SHA

package-installation:
  stage: package-installation
  script:
    - echo -n '{"auths":{"'$REGISTRY_URL'":{"auth":"'$(echo -n $REGISTRY_USER:$REGISTRY_PASSWORD | base64 -w 0)'"}}}' > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --target package-installation
      --build-arg CACHE_REGISTRY_URL=$CACHE_REGISTRY_URL
      --verbosity debug
      --destination "${image}:package-installation"
#    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_URL
#    - docker info
#    - docker build --target package-installation -t ${image}:package-installation --build-arg CACHE_REGISTRY_URL=$CACHE_REGISTRY_URL .
#    - docker push ${image}:package-installation
  except:
    refs:
      - tags
  only:
    changes:
      - "**/package*.json"
      - Dockerfile
  when: always

.build:
  stage: build
  script:
    - echo "$BASE_ENV" > .env
    - echo "$INSTANCE_ENV" >> .env
    - echo -e "\nVERSION=$VERSION" >> .env
    - cat .env
    - docker build -t ${image}:$VERSION --build-arg CACHE_REGISTRY_URL=$CACHE_REGISTRY_URL .
  allow_failure: false
  when: always
  artifacts:
    paths:
      - .env
    expire_in: 2 week

build-develop:
  extends: .build
  variables:
    INSTANCE_ENV: $DEV_ENV
    VERSION: $VERSION-$CI_JOB_NAME

build-stage:
  extends: .build
  variables:
    INSTANCE_ENV: $DEV_STAGE
    VERSION: $VERSION-$CI_JOB_NAME

build-production:
  extends: .build
  variables:
    INSTANCE_ENV: $DEV_PRODUCTION
    VERSION: $VERSION-$CI_JOB_NAME

##############
# test to be #
#############

.release:
  stage: release
  script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_URL
    - docker image push ${image}:$VERSION
    - docker image tag ${image}:$VERSION ${image}:latest
    - docker image push ${image}:latest




deploy_kuber:
  stage: deploy-k8s
  variables:
    repo: gitlab./devops/argo-configs.git
    manifest: workloads.yaml
    path: argo-configs/APP-v2/
  script:
    - unset http_proxy && unset https_proxy
    - git clone https://ci:$(cat $ARGO_TOKEN)@gitlab./devops/argo-configs.git
    - cd $path
    - yq -i '${{ parameters.imageNamePath }} = "${{ parameters.imageRepository }}"' ${{ parameters.chartPath }}
    - yq -i '${{ parameters.imageTagPath }} = "${{ parameters.imageTag }}"' ${{ parameters.chartPath }}
    - git add $manifest
#    - cat $manifest
    - git config user.email "ci@"
    - git config user.name "CI CD"
    - git commit -m "Frontend v2 deploy version $CI_COMMIT_TAG"
    - git push origin main

  only:
    - tags
