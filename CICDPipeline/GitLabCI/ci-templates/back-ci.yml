#image: $CACHE_REGISTRY_URL/library/docker:dind
#
## cache reg: images that need to be pulled from docker.io
## reg: custom images made by us
#
#services:
#  - $CACHE_REGISTRY_URL/library/docker:dind
#
include:
  - project: devops/ci-templates
    ref: main
    file: security-jobs/SAST.gitlab-ci.yml
  - project: devops/ci-templates
    ref: main
    file: security-jobs/Secret-Detection.gitlab-ci.yml
  - project: devops/ci-templates
    ref: main
    file: security-jobs/Dependency-Scanning.gitlab-ci.yml
  - project: devops/ci-templates
    ref: main
    file: security-jobs/container-scanning.gitlab-ci.yml
  - project: devops/ci-templates
    ref: main
    file: security-jobs/DAST.gitlab-ci.yml

stages:
  - init_charts
  - package-installation
  - build
  - SAST
  - test
  - push
  - container-scanning
  - deploy
  - DAST
  
variables:
  GITLAB_FEATURES: "${GITLAB_FEATURES},dependency_scanning"
  name: $CI_PROJECT_NAMESPACE
  url: $CI_PROJECT_NAME.${name}.{url.com}
  image: $REGISTRY_URL/$CI_PROJECT_PATH
  gitlabUrl: gitlab.{url.com}

workflow:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(v|V)?[0-9]{1,2}\.[0-9]{1,3}\.[0-9]{1,3}[^\s\\]{0,48}$/'
      variables:
        version: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|web)$/'
      variables:
        version: $CI_COMMIT_SHORT_SHA

sonarqube-check:
  stage: SAST
  image: $SONAR_IMAGE
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - $SONAR_VERIFY_SCRIPT
  allow_failure: true


package-installation:
  stage: package-installation
  script:
    - sudo docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_URL
    - sudo docker build --target package-installation -t ${image}:package-installation --build-arg CACHE_REGISTRY_URL=$CACHE_REGISTRY_URL --build-arg NPM_REGISTRY=$NPM_REGISTRY .
    - sudo docker push ${image}:package-installation
  except:
    refs:
      - tags
  only:
    changes:
      - "**/package*.json"
      - Dockerfile
      - "**requirements.txt"
  when: always
  tags:
    - build


build:
  stage: build
  script:
    - echo "$BASE_ENV" > .env
    - echo -e "\nversion=$version" >> .env
    - cat .env
    - source .env
    - echo $version
    - sudo docker build -t ${image}:$version --build-arg CACHE_REGISTRY_URL=$CACHE_REGISTRY_URL .
  allow_failure: false
  when: always
  artifacts:
    paths:
      - .env
    expire_in: 2 week
  tags:
    - build


##############
# test to be #
#############

push:
  stage: push
  script:
    - source .env
    - sudo docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_URL
    - sudo docker image push ${image}:$version
    - sudo docker image tag ${image}:$version ${image}:latest
    - sudo docker image push ${image}:latest
  needs:
    - job: build
      artifacts: true
  artifacts:
    paths:
      - .env
    expire_in: 2 week
  when: on_success  
  tags:
    - push


.init_charts:
  stage: init_charts
  variables:
    appDir: ./apps-templates/backend/${instance}/${name}
  script:
    - which envsubst || sudo apt-get install gettext-base -y
    - git clone https://oauth2:$CICD_BOT_ACCESS_TOKEN@${gitlabUrl}/devops/apps-templates.git
    - git clone https://oauth2:$CICD_BOT_ACCESS_TOKEN@${gitlabUrl}/devops/ci-templates.git
    - mkdir -p ${appDir} ${appDir}/../apps/ 
    - envsubst < ci-templates/back-values-template.yml | tee ${appDir}/values.yaml
    - envsubst < ci-templates/back-chart-template.yml | tee ${appDir}/Chart.yaml
    - envsubst < ci-templates/back-app-template.yml | tee ${appDir}/../apps/${name}.yaml
    - ls ${appDir}/values.yaml
    - cat ${appDir}/values.yaml
    - cd ./apps-templates
    - git config user.email "$CICD_BOT_EMAIL"
    - git config user.name "CICD_BOT_USER"
    - git status
    - git add -A
    - git commit -m 'automatically initialized app in init_charts stage of back-ci'
    - git push -u origin main
  allow_failure: true
  tags:
    - init_charts


#init-charts-stage:
#  extends: .init_charts
#  variables:
#    instance: stage



.deploy-ArgoCD:
  stage: deploy
  variables:
    valuesPath: ./backend/${instance}/${name}/values.yaml
  script:
    - which yq || sudo snap install yq
    - source .env
    - git clone https://oauth2:$CICD_BOT_ACCESS_TOKEN@${gitlabUrl}/devops/apps-templates.git
    - cd ./apps-templates
    - yq -i ".web.image.tag = \"${version}\"" ${valuesPath}
    - yq -i ".web.image.repository = \"${image}\"" ${valuesPath}
    - cat ${valuesPath}
    - git config user.email "$CICD_BOT_EMAIL"
    - git config user.name "CICD_BOT_USER"
    - git status
    - git add ${valuesPath}
    - git commit -m 'automatically initialized app in predeploy stage of back-ci'
    - git push -u origin main
  allow_failure: false
  tags:
    - deploy
  needs:
    - job: push
      artifacts: true
    - job: container_scanning

deploy-stage:
  extends: .deploy-ArgoCD
  variables:
    instance: stage
  # when should be changed to manual
  when: on_success  
